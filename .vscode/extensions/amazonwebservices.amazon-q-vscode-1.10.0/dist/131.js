"use strict";exports.id=131,exports.ids=[131],exports.modules={47131:(j,v,a)=>{a.d(v,{fromSSO:()=>U});var t=a(68924),d=a(43598);const N=s=>s&&(typeof s.sso_start_url=="string"||typeof s.sso_account_id=="string"||typeof s.sso_session=="string"||typeof s.sso_region=="string"||typeof s.sso_role_name=="string"),V=5*60*1e3,C="To refresh this SSO session run 'aws sso login' with the corresponding profile.",I={},_=async s=>{const{SSOOIDCClient:n}=await a.e(71).then(a.bind(a,25071));if(I[s])return I[s];const e=new n({region:s});return I[s]=e,e},E=async(s,n)=>{const{CreateTokenCommand:e}=await a.e(71).then(a.bind(a,25071));return(await _(n)).send(new e({clientId:s.clientId,clientSecret:s.clientSecret,refreshToken:s.refreshToken,grantType:"refresh_token"}))},$=s=>{if(s.expiration&&s.expiration.getTime()<Date.now())throw new t.rh(`Token is expired. ${C}`,!1)},h=(s,n,e=!1)=>{if(typeof n>"u")throw new t.rh(`Value not present for '${s}' in SSO Token${e?". Cannot refresh":""}. ${C}`,!1)};var P=a(57147);const{writeFile:H}=P.promises,M=(s,n)=>{const e=(0,d.Py)(s),i=JSON.stringify(n,null,2);return H(e,i)},D=new Date(0),F=(s={})=>async()=>{s.logger?.debug("@aws-sdk/token-providers","fromSso");const n=await(0,d.MX)(s),e=(0,d.Jl)(s),i=n[e];if(i){if(!i.sso_session)throw new t.rh(`Profile '${e}' is missing required property 'sso_session'.`)}else throw new t.rh(`Profile '${e}' could not be found in shared credentials file.`,!1);const c=i.sso_session,l=(await(0,d.G)(s))[c];if(!l)throw new t.rh(`Sso session '${c}' could not be found in shared credentials file.`,!1);for(const r of["sso_start_url","sso_region"])if(!l[r])throw new t.rh(`Sso session '${c}' is missing required property '${r}'.`,!1);const S=l.sso_start_url,w=l.sso_region;let o;try{o=await(0,d.gH)(c)}catch{throw new t.rh(`The SSO session token associated with profile=${e} was not found or is invalid. ${C}`,!1)}h("accessToken",o.accessToken),h("expiresAt",o.expiresAt);const{accessToken:O,expiresAt:y}=o,f={token:O,expiration:new Date(y)};if(f.expiration.getTime()-Date.now()>V)return f;if(Date.now()-D.getTime()<30*1e3)return $(f),f;h("clientId",o.clientId,!0),h("clientSecret",o.clientSecret,!0),h("refreshToken",o.refreshToken,!0);try{D.setTime(Date.now());const r=await E(o,w);h("accessToken",r.accessToken),h("expiresIn",r.expiresIn);const g=new Date(Date.now()+r.expiresIn*1e3);try{await M(c,{...o,accessToken:r.accessToken,expiresAt:g.toISOString(),refreshToken:r.refreshToken})}catch{}return{token:r.accessToken,expiration:g}}catch{return $(f),f}},p=!1,A=async({ssoStartUrl:s,ssoSession:n,ssoAccountId:e,ssoRegion:i,ssoRoleName:c,ssoClient:T,clientConfig:l,profile:S})=>{let w;const o="To refresh this SSO session run aws sso login with the corresponding profile.";if(n)try{const u=await F({profile:S})();w={accessToken:u.token,expiresAt:new Date(u.expiration).toISOString()}}catch(u){throw new t.mV(u.message,p)}else try{w=await(0,d.gH)(s)}catch{throw new t.mV(`The SSO session associated with this profile is invalid. ${o}`,p)}if(new Date(w.expiresAt).getTime()-Date.now()<=0)throw new t.mV(`The SSO session associated with this profile has expired. ${o}`,p);const{accessToken:O}=w,{SSOClient:y,GetRoleCredentialsCommand:f}=await a.e(637).then(a.bind(a,73637)),r=T||new y(Object.assign({},l??{},{region:l?.region??i}));let g;try{g=await r.send(new f({accountId:e,roleName:c,accessToken:O}))}catch(u){throw t.mV.from(u,p)}const{roleCredentials:{accessKeyId:x,secretAccessKey:m,sessionToken:k,expiration:R,credentialScope:K}={}}=g;if(!x||!m||!k||!R)throw new t.mV("SSO returns an invalid temporary credential.",p);return{accessKeyId:x,secretAccessKey:m,sessionToken:k,expiration:new Date(R),credentialScope:K}},G=s=>{const{sso_start_url:n,sso_account_id:e,sso_region:i,sso_role_name:c}=s;if(!n||!e||!i||!c)throw new t.mV(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(s).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,!1);return s},U=(s={})=>async()=>{s.logger?.debug("@aws-sdk/credential-provider-sso","fromSSO");const{ssoStartUrl:n,ssoAccountId:e,ssoRegion:i,ssoRoleName:c,ssoSession:T}=s,{ssoClient:l}=s,S=(0,d.Jl)(s);if(!n&&!e&&!i&&!c&&!T){const o=(await(0,d.MX)(s))[S];if(!o)throw new t.mV(`Profile ${S} was not found.`);if(!N(o))throw new t.mV(`Profile ${S} is not configured with SSO credentials.`);if(o?.sso_session){const m=(await(0,d.G)(s))[o.sso_session],k=` configurations in profile ${S} and sso-session ${o.sso_session}`;if(i&&i!==m.sso_region)throw new t.mV("Conflicting SSO region"+k,!1);if(n&&n!==m.sso_start_url)throw new t.mV("Conflicting SSO start_url"+k,!1);o.sso_region=m.sso_region,o.sso_start_url=m.sso_start_url}const{sso_start_url:O,sso_account_id:y,sso_region:f,sso_role_name:r,sso_session:g}=G(o);return A({ssoStartUrl:O,ssoSession:g,ssoAccountId:y,ssoRegion:f,ssoRoleName:r,ssoClient:l,clientConfig:s.clientConfig,profile:S})}else{if(!n||!e||!i||!c)throw new t.mV('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"');return A({ssoStartUrl:n,ssoSession:T,ssoAccountId:e,ssoRegion:i,ssoRoleName:c,ssoClient:l,clientConfig:s.clientConfig,profile:S})}}}};
