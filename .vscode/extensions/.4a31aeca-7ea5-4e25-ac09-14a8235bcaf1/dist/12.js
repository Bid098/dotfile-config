"use strict";exports.id=12,exports.ids=[12],exports.modules={79012:(I,d,o)=>{o.r(d),o.d(d,{fromTokenFile:()=>E,fromWebToken:()=>l});var i=o(68924),c=o(57147);const l=e=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-web-identity","fromWebToken");const{roleArn:n,roleSessionName:s,webIdentityToken:t,providerId:m,policyArns:N,policy:S,durationSeconds:f}=e;let{roleAssumerWithWebIdentity:r}=e;if(!r){const{getDefaultRoleAssumerWithWebIdentity:A}=await Promise.all([o.e(653),o.e(318)]).then(o.bind(o,16318));r=A({...e.clientConfig,credentialProviderLogger:e.logger,parentClientConfig:e.parentClientConfig},e.clientPlugins)}return r({RoleArn:n,RoleSessionName:s??`aws-sdk-js-session-${Date.now()}`,WebIdentityToken:t,ProviderId:m,PolicyArns:N,Policy:S,DurationSeconds:f})},a="AWS_WEB_IDENTITY_TOKEN_FILE",g="AWS_ROLE_ARN",y="AWS_ROLE_SESSION_NAME",E=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-web-identity","fromTokenFile");const n=e?.webIdentityTokenFile??process.env[a],s=e?.roleArn??process.env[g],t=e?.roleSessionName??process.env[y];if(!n||!s)throw new i.mV("Web identity configuration not specified");return l({...e,webIdentityToken:(0,c.readFileSync)(n,{encoding:"ascii"}),roleArn:s,roleSessionName:t})()}}};
